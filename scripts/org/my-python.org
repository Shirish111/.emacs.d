#+TITLE: Python
#+AUTHOR: Shirishkumar Togarla
#+PROPERTY: header-args :tangle (f-expand (concat (f-base (buffer-file-name)) ".el") "../src")
* Package Initialization
#+begin_src elisp
;;; my-python.el --- Configuration to be loaded while starting emacs
;;; Commentary

;; The `my-python' package is used to load the required configuration
#+end_src
* Python
#+begin_src elisp
  (use-package python
    :mode ("\\.py\\'" . python-mode)
          ("\\.wsgi$" . python-mode)
    :interpreter ("python" . python-mode)
    :init
    (setq-default indent-tabs-mode nil)
    :config
    (define-key python-mode-map (kbd "C-t") 'run-python)
    (define-key inferior-python-mode-map (kbd "C-t") (kbd "C-x 0"))
    (setq python-indent-offset 4))
#+end_src
* Jedi
#+begin_src elisp
(use-package jedi
  :ensure t
  :init
  (add-to-list 'company-backends 'company-jedi)
  :config
  (use-package company-jedi
    :ensure t
    :init
    (add-hook 'python-mode-hook (lambda () (add-to-list 'company-backends 'company-jedi)))
    (setq company-jedi-python-bin "python")))
#+end_src
* Anaconda-mode
#+begin_src elisp
(use-package anaconda-mode
  :ensure t
  :init (add-hook 'python-mode-hook 'anaconda-mode)
        (add-hook 'python-mode-hook 'anaconda-eldoc-mode)
  :config (use-package company-anaconda
            :ensure t
            :init (add-hook 'python-mode-hook 'anaconda-mode)
            (eval-after-load "company"
              '(add-to-list 'company-backends '(company-anaconda :with company-capf)))))
#+end_src
* Elpy
#+begin_src elisp
(use-package elpy
  :ensure t
  :commands elpy-enable
  :init (with-eval-after-load 'python (elpy-enable))

  :config
  (define-key elpy-mode-map (kbd "C-<up>") nil)
  (define-key elpy-mode-map (kbd "C-<down>") nil)
  (electric-indent-local-mode -1)
  (delete 'elpy-module-highlight-indentation elpy-modules)
  (delete 'elpy-module-flymake elpy-modules)
  (add-hook 'before-save-hook (lambda () (when (eq major-mode 'python-mode) (elpy-format-code))))

  (defun ha/elpy-goto-definition ()
    (interactive)
    (condition-case err
        (elpy-goto-definition)
      ('error (xref-find-definitions (symbol-name (symbol-at-point))))))

  :bind (:map elpy-mode-map ([remap elpy-goto-definition] .
                             ha/elpy-goto-definition)))
#+end_src
* Live Python mode
  #+begin_src elisp
    (use-package live-py-mode 
      :init
      :ensure t
      :config
      )
  #+end_src

* Package End
#+begin_src elisp
(provide 'my-python)

;;; my-python package ends here

#+end_src
